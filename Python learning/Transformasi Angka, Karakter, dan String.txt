Transformasi Angka, Karakter, dan String

Pada materi ini, Anda akan mempelajari berbagai cara mentransformasi tipe data string. Ada banyak method/metode yang dapat membantu Anda mentransformasi tipe data string.
.
.
.
Mengubah Huruf Besar/Kecil

Dalam kategori ini terdapat beberapa metode yang dapat digunakan untuk mengubah string menjadi huruf kapital (UPPERCASE) atau huruf kecil (lowercase). Kedua metode ini, baik upper() maupun lower() adalah metode bawaan dari string Python. Perlu diingat bahwa jika terdapat karakter bukan huruf (seperti simbol atau angka) yang tidak memiliki opsi kapital sehingga karakter tersebut tidak diubah.
.
.
.
Awalan dan Akhiran

Kategori ini adalah metode dalam string yang biasanya dipergunakan untuk menghapus karakter whitespace pada suatu string. Namun, selain whitespace bisa juga diperuntukkan untuk menghilangkan kata yang tidak diinginkan.
.
rstrip()
Metode rstrip() menghapus whitespace pada sebelah kanan atau akhir string.
.
lstrip()
Kebalikan dari rstrip(), lstrip() bertugas untuk menghapus whitespace pada sebelah kiri atau awal string. 
.
strip()
Metode ini bertugas untuk menghapus whitespace pada bagian awal dan akhir string.
.
startswith()
Metode startswith() bertujuan untuk menemukan suatu kata pada awal string. Metode ini mengembalikan nilai True.
.
endswith()
Metode endswith() bertujuan untuk menemukan suatu kata pada akhir string. Metode ini juga mengembalikan nilai True jika menemukannya, sedangkan jika tidak menemukan kata yang diinginkan, nilai False dikembalikan.
.
.
.
Memisah dan Menggabung String

Kategori selanjutnya adalah memisah dan menggabung string. Anda dapat menggunakan metode ini untuk tujuan tersebut dengan menggunakan dua metode berikut.
.
menggabungkan string "Dicoding", "Indonesia", dan "!" yang telah disimpan pada variabel list. Perhatikan bahwa pada sintaks awal sebelum ".join()" Anda menambahkan single quotes di sana. Single quotes ini bermaksud agar Anda menentukan delimiter pada setiap kata/nilai yang ingin Anda gabungkan. Pada kode di atas, delimiter-nya adalah whitespace atau spasi. Bisa Juga menggunakan dilimiter dengan Input tertentu.
.
split()
Kebalikan dari metode sebelumnya, metode split() bertujuan untuk memisahkan kata/substring berdasarkan delimiter.
Anda juga bisa menggunakan delimiter newline (\n) untuk memisahkan setiap baris pada string multiline.
.
.
.
Mengganti Elemen String
Kategori selanjutnya merupakan metode yang bertujuan untuk mengganti elemen string di dalamnya dengan elemen string lainnya.
.
replace()
Perhatikan kode di atas, Anda mengubah kata "Coding" menjadi "Pemrograman". Perlu diingat bahwa replace() bersifat case-sensitive. Contohnya, Anda dapat lihat dalam kode di atas bahwa kata "coding" pada "Dicoding" tidak ikut berubah. Hanya kata "Coding" saja yang diubah menjadi "Pemrograman". Hal ini karena kata "coding" pada "Dicoding" berawalan huruf c kecil.
.
.
.
Pengecekan String

Kategori selanjutnya bertujuan untuk melakukan pengecekan pada string. Hasil dari kategori ini adalah mengembalikan nilai boolean True/False. 
.
isupper()
isupper() akan mengembalikan nilai True jika semua huruf dalam string adalah huruf kapital (uppercase). Sebaliknya, jika ada satu huruf saja yang kecil/tidak uppercase, nilai False akan dikembalikan.
.
islower()
Kebalikannya, islower() akan mengembalikan nilai True jika semua huruf dalam string adalah huruf kecil (lowercase). 
.
isalpha()
Metode ini mengembalikan nilai True jika semua karakter dalam string adalah huruf alfabet. Jika ada satu huruf lain yang bukan alfabet, seperti angka, nilai False akan dikembalikan.
.
isalnum()
Metode isalnum() mengembalikan nilai True jika karakter dalam string adalah alfanumerik, yaitu hanya huruf atau hanya angka atau berisi keduanya. Jika tidak, nilai False akan dikembalikan.
.
isdecimal()
Metode isdecimal() akan mengembalikan nilai True jika karakter dalam string berisi hanya angka/numerik. Jika tidak, nilai False akan dikembalikan.
.
isspace()
Metode isspace() akan mengembalikan nilai True jika string hanya berisi whitespace, seperti spasi, tab, newline, atau karakter whitespace lainnya.
.
istitle()
Metode istitle() mengembalikan nilai True jika string berisi huruf kapital pada setiap kata pertamanya. Jika tidak, nilai False dikembalikan.
.
Formatting pada String

Kategori terakhir yang akan kita bahas pada modul kali ini adalah formatting pada string. Dalam kategori ini terdapat beberapa metode, yaitu zfill(), rjust(), ljust(), center(), dll. Semua metode akan dijelaskan secara detail di bawah ini. Simak baik-baik, ya.
.
zfill()
Metode zfill() bertujuan untuk menambahkan nilai nol (0) di depan sebuah string dengan panjang tertentu. Tujuan dari metode ini adalah membantu untuk memastikan bahwa sebuah angka atau nilai memiliki panjang tetap, terutama ketika ingin menyimpan nilai dalam format yang konsisten.
Metode zfill() ini berguna ketika ingin memastikan bahwa angka atau nilai dalam string memiliki panjang tetap dan sesuai dengan format yang diinginkan. Metode zfill() dapat diterapkan untuk menetapkan nomor nota atau nomor antrian.
.
rjust()
Metode rjust() berguna untuk merapikan pencetakan teks. Dengan metode rjust() ini, Anda dapat membuat teks menjadi rata kanan sehingga tampilannya lebih rapi.
.
ljust()
Selanjutnya adalah metode ljust(), metode ini adalah kebalikan dari metode rjust() yang bertujuan untuk membuat teks menjadi rata kiri.
.
center()
Metode center() menjadikan teks rata tengah. Metode ini akan menambahkan whitespace di sebelah kiri dan kanan secara default. Anda juga bisa mengganti whitespace tersebut dengan karakter lain.
.
		Sekali lagi, Anda harus ingat bahwa zfill(), rjust(), ljust(), dan center() berfungsi sama, yakni memastikan panjang teks sesuai dengan yang diminta.
.
.
.
String Literals

Umumnya, string ditulis dengan mudah di Python, diapit oleh tanda petik tunggal. Namun, dalam kondisi tertentu, dibutuhkan petik tunggal di tengah string (misalnya, struktur kepemilikan dalam bahasa Inggrisâ€”Dicoding's Cat atau penyebutan Jum'at pada hari dalam bahasa Indonesia).

Misalnya, kita menuliskannya sebagai berikut.

st1 = 'Jum'at'
Python akan salah mengira bahwa string berakhir setelah huruf m dan selebihnya merupakan kode yang invalid. Namun, Python memperbolehkan untuk menggunakan petik dua seperti Anda menggunakan petik tunggal. Dalam kasus sebelumnya, Anda cukup mengetik seperti berikut.

st1 = "Jum'at"
Dalam contoh di atas, Python mengenali bahwa petik tunggal adalah bagian tidak terpisahkan dari string tersebut. Bagaimana jika kita memerlukan kedua jenis petik dalam string tunggal? Python menyediakan escape character.

Escape character memungkinkan Anda untuk menggunakan karakter yang sebelumnya tidak bisa dimasukkan dalam string. Umumnya diawali dengan backslash (\) dan diikuti karakter tertentu yang diinginkan. Contohnya, untuk petik tunggal Anda dapat menambahkan \'.

Ini merupakan cara paling aman untuk melakukan penambahan atau penyuntingan dalam variabel. Contohnya berikut.

st1 = 'Jum\'at'
Python mengetahui bahwa pada Jum\'at, sebelum petik terdapat backslash (\) yang menandakan petik tunggal sebagai bagian dari string dan bukan akhir dari string. Escape character \' dan \" memungkinkan Anda untuk memasukkan karakter ' dan '' dalam bagian string. Beberapa contoh escape character lainnya sebagai berikut. 

\' Single quote
\" Double quote
\t Tab
\n Newline (line break)
\\ Backslash
.
.
.
Raw String

Python juga menyediakan cara untuk mencetak string sesuai dengan apa pun input atau teks yang diberikan. Metode ini dinamakan raw strings. Umumnya, ia digunakan untuk regex atau beberapa implementasi lain yang sangat bergantung pada keberadaan backslash. Untuk mengimplementasikan raw strings, sisipkan huruf r sebelum pembuka string.